classdef GpsCustom < robotics.ros.Message
    %GpsCustom MATLAB implementation of asctec_hl_comm/GpsCustom
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'asctec_hl_comm/GpsCustom' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'ea845c87e3fc5ff92a4bebb639327746' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        SensorMsgsNavSatStatusClass = robotics.ros.msg.internal.MessageFactory.getClassForType('sensor_msgs/NavSatStatus') % Dispatch to MATLAB class for message type sensor_msgs/NavSatStatus
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Status
        Latitude
        Longitude
        Altitude
        PositionCovarianceType
        PressureHeight
        VelocityX
        VelocityY
        PositionCovariance
        VelocityCovariance
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Status', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Altitude', 'Header', 'Latitude', 'Longitude', 'PositionCovariance', 'PositionCovarianceType', 'PressureHeight', 'Status', 'VelocityCovariance', 'VelocityX', 'VelocityY'} % List of non-constant message properties
        ROSPropertyList = {'altitude', 'header', 'latitude', 'longitude', 'position_covariance', 'position_covariance_type', 'pressure_height', 'status', 'velocity_covariance', 'velocity_x', 'velocity_y'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = GpsCustom(msg)
            %GpsCustom Construct the message object GpsCustom
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'GpsCustom', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function status = get.Status(obj)
            %get.Status Get the value for property Status
            if isempty(obj.Cache.Status)
                obj.Cache.Status = feval(obj.SensorMsgsNavSatStatusClass, obj.JavaMessage.getStatus);
            end
            status = obj.Cache.Status;
        end
        
        function set.Status(obj, status)
            %set.Status Set the value for property Status
            validateattributes(status, {obj.SensorMsgsNavSatStatusClass}, {'nonempty', 'scalar'}, 'GpsCustom', 'Status');
            
            obj.JavaMessage.setStatus(status.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Status)
                obj.Cache.Status.setJavaObject(status.getJavaObject);
            end
        end
        
        function latitude = get.Latitude(obj)
            %get.Latitude Get the value for property Latitude
            latitude = double(obj.JavaMessage.getLatitude);
        end
        
        function set.Latitude(obj, latitude)
            %set.Latitude Set the value for property Latitude
            validateattributes(latitude, {'numeric'}, {'nonempty', 'scalar'}, 'GpsCustom', 'Latitude');
            
            obj.JavaMessage.setLatitude(latitude);
        end
        
        function longitude = get.Longitude(obj)
            %get.Longitude Get the value for property Longitude
            longitude = double(obj.JavaMessage.getLongitude);
        end
        
        function set.Longitude(obj, longitude)
            %set.Longitude Set the value for property Longitude
            validateattributes(longitude, {'numeric'}, {'nonempty', 'scalar'}, 'GpsCustom', 'Longitude');
            
            obj.JavaMessage.setLongitude(longitude);
        end
        
        function altitude = get.Altitude(obj)
            %get.Altitude Get the value for property Altitude
            altitude = double(obj.JavaMessage.getAltitude);
        end
        
        function set.Altitude(obj, altitude)
            %set.Altitude Set the value for property Altitude
            validateattributes(altitude, {'numeric'}, {'nonempty', 'scalar'}, 'GpsCustom', 'Altitude');
            
            obj.JavaMessage.setAltitude(altitude);
        end
        
        function positioncovariancetype = get.PositionCovarianceType(obj)
            %get.PositionCovarianceType Get the value for property PositionCovarianceType
            positioncovariancetype = typecast(int8(obj.JavaMessage.getPositionCovarianceType), 'uint8');
        end
        
        function set.PositionCovarianceType(obj, positioncovariancetype)
            %set.PositionCovarianceType Set the value for property PositionCovarianceType
            validateattributes(positioncovariancetype, {'numeric'}, {'nonempty', 'scalar'}, 'GpsCustom', 'PositionCovarianceType');
            
            obj.JavaMessage.setPositionCovarianceType(positioncovariancetype);
        end
        
        function pressureheight = get.PressureHeight(obj)
            %get.PressureHeight Get the value for property PressureHeight
            pressureheight = double(obj.JavaMessage.getPressureHeight);
        end
        
        function set.PressureHeight(obj, pressureheight)
            %set.PressureHeight Set the value for property PressureHeight
            validateattributes(pressureheight, {'numeric'}, {'nonempty', 'scalar'}, 'GpsCustom', 'PressureHeight');
            
            obj.JavaMessage.setPressureHeight(pressureheight);
        end
        
        function velocityx = get.VelocityX(obj)
            %get.VelocityX Get the value for property VelocityX
            velocityx = double(obj.JavaMessage.getVelocityX);
        end
        
        function set.VelocityX(obj, velocityx)
            %set.VelocityX Set the value for property VelocityX
            validateattributes(velocityx, {'numeric'}, {'nonempty', 'scalar'}, 'GpsCustom', 'VelocityX');
            
            obj.JavaMessage.setVelocityX(velocityx);
        end
        
        function velocityy = get.VelocityY(obj)
            %get.VelocityY Get the value for property VelocityY
            velocityy = double(obj.JavaMessage.getVelocityY);
        end
        
        function set.VelocityY(obj, velocityy)
            %set.VelocityY Set the value for property VelocityY
            validateattributes(velocityy, {'numeric'}, {'nonempty', 'scalar'}, 'GpsCustom', 'VelocityY');
            
            obj.JavaMessage.setVelocityY(velocityy);
        end
        
        function positioncovariance = get.PositionCovariance(obj)
            %get.PositionCovariance Get the value for property PositionCovariance
            javaArray = obj.JavaMessage.getPositionCovariance;
            array = obj.readJavaArray(javaArray, 'double');
            positioncovariance = double(array);
        end
        
        function set.PositionCovariance(obj, positioncovariance)
            %set.PositionCovariance Set the value for property PositionCovariance
            validateattributes(positioncovariance, {'numeric'}, {'vector', 'numel', 9}, 'GpsCustom', 'PositionCovariance');
            
            javaArray = obj.JavaMessage.getPositionCovariance;
            array = obj.writeJavaArray(positioncovariance, javaArray, 'double');
            obj.JavaMessage.setPositionCovariance(array);
        end
        
        function velocitycovariance = get.VelocityCovariance(obj)
            %get.VelocityCovariance Get the value for property VelocityCovariance
            javaArray = obj.JavaMessage.getVelocityCovariance;
            array = obj.readJavaArray(javaArray, 'double');
            velocitycovariance = double(array);
        end
        
        function set.VelocityCovariance(obj, velocitycovariance)
            %set.VelocityCovariance Set the value for property VelocityCovariance
            validateattributes(velocitycovariance, {'numeric'}, {'vector', 'numel', 4}, 'GpsCustom', 'VelocityCovariance');
            
            javaArray = obj.JavaMessage.getVelocityCovariance;
            array = obj.writeJavaArray(velocitycovariance, javaArray, 'double');
            obj.JavaMessage.setVelocityCovariance(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Status = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Latitude = obj.Latitude;
            cpObj.Longitude = obj.Longitude;
            cpObj.Altitude = obj.Altitude;
            cpObj.PositionCovarianceType = obj.PositionCovarianceType;
            cpObj.PressureHeight = obj.PressureHeight;
            cpObj.VelocityX = obj.VelocityX;
            cpObj.VelocityY = obj.VelocityY;
            cpObj.PositionCovariance = obj.PositionCovariance;
            cpObj.VelocityCovariance = obj.VelocityCovariance;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Status = copy(obj.Status);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Latitude = strObj.Latitude;
            obj.Longitude = strObj.Longitude;
            obj.Altitude = strObj.Altitude;
            obj.PositionCovarianceType = strObj.PositionCovarianceType;
            obj.PressureHeight = strObj.PressureHeight;
            obj.VelocityX = strObj.VelocityX;
            obj.VelocityY = strObj.VelocityY;
            obj.PositionCovariance = strObj.PositionCovariance;
            obj.VelocityCovariance = strObj.VelocityCovariance;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.Status = feval([obj.SensorMsgsNavSatStatusClass '.loadobj'], strObj.Status);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Latitude = obj.Latitude;
            strObj.Longitude = obj.Longitude;
            strObj.Altitude = obj.Altitude;
            strObj.PositionCovarianceType = obj.PositionCovarianceType;
            strObj.PressureHeight = obj.PressureHeight;
            strObj.VelocityX = obj.VelocityX;
            strObj.VelocityY = obj.VelocityY;
            strObj.PositionCovariance = obj.PositionCovariance;
            strObj.VelocityCovariance = obj.VelocityCovariance;
            strObj.Header = saveobj(obj.Header);
            strObj.Status = saveobj(obj.Status);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.asctec_hl_comm.GpsCustom.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.asctec_hl_comm.GpsCustom;
            obj.reload(strObj);
        end
    end
end
