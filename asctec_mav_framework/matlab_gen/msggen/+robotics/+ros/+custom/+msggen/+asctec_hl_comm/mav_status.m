classdef mav_status < robotics.ros.Message
    %mav_status MATLAB implementation of asctec_hl_comm/mav_status
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'asctec_hl_comm/mav_status' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'f975cbdf223868931f194323c62d7be5' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        BatteryVoltage
        FlightModeLl
        StateEstimation
        PositionControl
        SerialInterfaceEnabled
        SerialInterfaceActive
        FlightTime
        CpuLoad
        MotorStatus
        GpsStatus
        GpsNumSatellites
        Debug1
        Debug2
        HaveSSDKParameters
        TxPackets
        TxPacketsGood
        RxPackets
        RxPacketsGood
        TimesyncOffset
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'BatteryVoltage', 'CpuLoad', 'Debug1', 'Debug2', 'FlightModeLl', 'FlightTime', 'GpsNumSatellites', 'GpsStatus', 'HaveSSDKParameters', 'Header', 'MotorStatus', 'PositionControl', 'RxPackets', 'RxPacketsGood', 'SerialInterfaceActive', 'SerialInterfaceEnabled', 'StateEstimation', 'TimesyncOffset', 'TxPackets', 'TxPacketsGood'} % List of non-constant message properties
        ROSPropertyList = {'battery_voltage', 'cpu_load', 'debug1', 'debug2', 'flight_mode_ll', 'flight_time', 'gps_num_satellites', 'gps_status', 'have_SSDK_parameters', 'header', 'motor_status', 'position_control', 'rx_packets', 'rx_packets_good', 'serial_interface_active', 'serial_interface_enabled', 'state_estimation', 'timesync_offset', 'tx_packets', 'tx_packets_good'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = mav_status(msg)
            %mav_status Construct the message object mav_status
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'mav_status', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function batteryvoltage = get.BatteryVoltage(obj)
            %get.BatteryVoltage Get the value for property BatteryVoltage
            batteryvoltage = single(obj.JavaMessage.getBatteryVoltage);
        end
        
        function set.BatteryVoltage(obj, batteryvoltage)
            %set.BatteryVoltage Set the value for property BatteryVoltage
            validateattributes(batteryvoltage, {'numeric'}, {'nonempty', 'scalar'}, 'mav_status', 'BatteryVoltage');
            
            obj.JavaMessage.setBatteryVoltage(batteryvoltage);
        end
        
        function flightmodell = get.FlightModeLl(obj)
            %get.FlightModeLl Get the value for property FlightModeLl
            flightmodell = char(obj.JavaMessage.getFlightModeLl);
        end
        
        function set.FlightModeLl(obj, flightmodell)
            %set.FlightModeLl Set the value for property FlightModeLl
            validateattributes(flightmodell, {'char'}, {}, 'mav_status', 'FlightModeLl');
            
            obj.JavaMessage.setFlightModeLl(flightmodell);
        end
        
        function stateestimation = get.StateEstimation(obj)
            %get.StateEstimation Get the value for property StateEstimation
            stateestimation = char(obj.JavaMessage.getStateEstimation);
        end
        
        function set.StateEstimation(obj, stateestimation)
            %set.StateEstimation Set the value for property StateEstimation
            validateattributes(stateestimation, {'char'}, {}, 'mav_status', 'StateEstimation');
            
            obj.JavaMessage.setStateEstimation(stateestimation);
        end
        
        function positioncontrol = get.PositionControl(obj)
            %get.PositionControl Get the value for property PositionControl
            positioncontrol = char(obj.JavaMessage.getPositionControl);
        end
        
        function set.PositionControl(obj, positioncontrol)
            %set.PositionControl Set the value for property PositionControl
            validateattributes(positioncontrol, {'char'}, {}, 'mav_status', 'PositionControl');
            
            obj.JavaMessage.setPositionControl(positioncontrol);
        end
        
        function serialinterfaceenabled = get.SerialInterfaceEnabled(obj)
            %get.SerialInterfaceEnabled Get the value for property SerialInterfaceEnabled
            serialinterfaceenabled = logical(obj.JavaMessage.getSerialInterfaceEnabled);
        end
        
        function set.SerialInterfaceEnabled(obj, serialinterfaceenabled)
            %set.SerialInterfaceEnabled Set the value for property SerialInterfaceEnabled
            validateattributes(serialinterfaceenabled, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'mav_status', 'SerialInterfaceEnabled');
            
            obj.JavaMessage.setSerialInterfaceEnabled(serialinterfaceenabled);
        end
        
        function serialinterfaceactive = get.SerialInterfaceActive(obj)
            %get.SerialInterfaceActive Get the value for property SerialInterfaceActive
            serialinterfaceactive = logical(obj.JavaMessage.getSerialInterfaceActive);
        end
        
        function set.SerialInterfaceActive(obj, serialinterfaceactive)
            %set.SerialInterfaceActive Set the value for property SerialInterfaceActive
            validateattributes(serialinterfaceactive, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'mav_status', 'SerialInterfaceActive');
            
            obj.JavaMessage.setSerialInterfaceActive(serialinterfaceactive);
        end
        
        function flighttime = get.FlightTime(obj)
            %get.FlightTime Get the value for property FlightTime
            flighttime = single(obj.JavaMessage.getFlightTime);
        end
        
        function set.FlightTime(obj, flighttime)
            %set.FlightTime Set the value for property FlightTime
            validateattributes(flighttime, {'numeric'}, {'nonempty', 'scalar'}, 'mav_status', 'FlightTime');
            
            obj.JavaMessage.setFlightTime(flighttime);
        end
        
        function cpuload = get.CpuLoad(obj)
            %get.CpuLoad Get the value for property CpuLoad
            cpuload = single(obj.JavaMessage.getCpuLoad);
        end
        
        function set.CpuLoad(obj, cpuload)
            %set.CpuLoad Set the value for property CpuLoad
            validateattributes(cpuload, {'numeric'}, {'nonempty', 'scalar'}, 'mav_status', 'CpuLoad');
            
            obj.JavaMessage.setCpuLoad(cpuload);
        end
        
        function motorstatus = get.MotorStatus(obj)
            %get.MotorStatus Get the value for property MotorStatus
            motorstatus = char(obj.JavaMessage.getMotorStatus);
        end
        
        function set.MotorStatus(obj, motorstatus)
            %set.MotorStatus Set the value for property MotorStatus
            validateattributes(motorstatus, {'char'}, {}, 'mav_status', 'MotorStatus');
            
            obj.JavaMessage.setMotorStatus(motorstatus);
        end
        
        function gpsstatus = get.GpsStatus(obj)
            %get.GpsStatus Get the value for property GpsStatus
            gpsstatus = char(obj.JavaMessage.getGpsStatus);
        end
        
        function set.GpsStatus(obj, gpsstatus)
            %set.GpsStatus Set the value for property GpsStatus
            validateattributes(gpsstatus, {'char'}, {}, 'mav_status', 'GpsStatus');
            
            obj.JavaMessage.setGpsStatus(gpsstatus);
        end
        
        function gpsnumsatellites = get.GpsNumSatellites(obj)
            %get.GpsNumSatellites Get the value for property GpsNumSatellites
            gpsnumsatellites = int32(obj.JavaMessage.getGpsNumSatellites);
        end
        
        function set.GpsNumSatellites(obj, gpsnumsatellites)
            %set.GpsNumSatellites Set the value for property GpsNumSatellites
            validateattributes(gpsnumsatellites, {'numeric'}, {'nonempty', 'scalar'}, 'mav_status', 'GpsNumSatellites');
            
            obj.JavaMessage.setGpsNumSatellites(gpsnumsatellites);
        end
        
        function debug1 = get.Debug1(obj)
            %get.Debug1 Get the value for property Debug1
            debug1 = int32(obj.JavaMessage.getDebug1);
        end
        
        function set.Debug1(obj, debug1)
            %set.Debug1 Set the value for property Debug1
            validateattributes(debug1, {'numeric'}, {'nonempty', 'scalar'}, 'mav_status', 'Debug1');
            
            obj.JavaMessage.setDebug1(debug1);
        end
        
        function debug2 = get.Debug2(obj)
            %get.Debug2 Get the value for property Debug2
            debug2 = int32(obj.JavaMessage.getDebug2);
        end
        
        function set.Debug2(obj, debug2)
            %set.Debug2 Set the value for property Debug2
            validateattributes(debug2, {'numeric'}, {'nonempty', 'scalar'}, 'mav_status', 'Debug2');
            
            obj.JavaMessage.setDebug2(debug2);
        end
        
        function havessdkparameters = get.HaveSSDKParameters(obj)
            %get.HaveSSDKParameters Get the value for property HaveSSDKParameters
            havessdkparameters = logical(obj.JavaMessage.getHaveSSDKParameters);
        end
        
        function set.HaveSSDKParameters(obj, havessdkparameters)
            %set.HaveSSDKParameters Set the value for property HaveSSDKParameters
            validateattributes(havessdkparameters, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'mav_status', 'HaveSSDKParameters');
            
            obj.JavaMessage.setHaveSSDKParameters(havessdkparameters);
        end
        
        function txpackets = get.TxPackets(obj)
            %get.TxPackets Get the value for property TxPackets
            txpackets = typecast(int32(obj.JavaMessage.getTxPackets), 'uint32');
        end
        
        function set.TxPackets(obj, txpackets)
            %set.TxPackets Set the value for property TxPackets
            validateattributes(txpackets, {'numeric'}, {'nonempty', 'scalar'}, 'mav_status', 'TxPackets');
            
            obj.JavaMessage.setTxPackets(txpackets);
        end
        
        function txpacketsgood = get.TxPacketsGood(obj)
            %get.TxPacketsGood Get the value for property TxPacketsGood
            txpacketsgood = typecast(int32(obj.JavaMessage.getTxPacketsGood), 'uint32');
        end
        
        function set.TxPacketsGood(obj, txpacketsgood)
            %set.TxPacketsGood Set the value for property TxPacketsGood
            validateattributes(txpacketsgood, {'numeric'}, {'nonempty', 'scalar'}, 'mav_status', 'TxPacketsGood');
            
            obj.JavaMessage.setTxPacketsGood(txpacketsgood);
        end
        
        function rxpackets = get.RxPackets(obj)
            %get.RxPackets Get the value for property RxPackets
            rxpackets = typecast(int32(obj.JavaMessage.getRxPackets), 'uint32');
        end
        
        function set.RxPackets(obj, rxpackets)
            %set.RxPackets Set the value for property RxPackets
            validateattributes(rxpackets, {'numeric'}, {'nonempty', 'scalar'}, 'mav_status', 'RxPackets');
            
            obj.JavaMessage.setRxPackets(rxpackets);
        end
        
        function rxpacketsgood = get.RxPacketsGood(obj)
            %get.RxPacketsGood Get the value for property RxPacketsGood
            rxpacketsgood = typecast(int32(obj.JavaMessage.getRxPacketsGood), 'uint32');
        end
        
        function set.RxPacketsGood(obj, rxpacketsgood)
            %set.RxPacketsGood Set the value for property RxPacketsGood
            validateattributes(rxpacketsgood, {'numeric'}, {'nonempty', 'scalar'}, 'mav_status', 'RxPacketsGood');
            
            obj.JavaMessage.setRxPacketsGood(rxpacketsgood);
        end
        
        function timesyncoffset = get.TimesyncOffset(obj)
            %get.TimesyncOffset Get the value for property TimesyncOffset
            timesyncoffset = single(obj.JavaMessage.getTimesyncOffset);
        end
        
        function set.TimesyncOffset(obj, timesyncoffset)
            %set.TimesyncOffset Set the value for property TimesyncOffset
            validateattributes(timesyncoffset, {'numeric'}, {'nonempty', 'scalar'}, 'mav_status', 'TimesyncOffset');
            
            obj.JavaMessage.setTimesyncOffset(timesyncoffset);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.BatteryVoltage = obj.BatteryVoltage;
            cpObj.FlightModeLl = obj.FlightModeLl;
            cpObj.StateEstimation = obj.StateEstimation;
            cpObj.PositionControl = obj.PositionControl;
            cpObj.SerialInterfaceEnabled = obj.SerialInterfaceEnabled;
            cpObj.SerialInterfaceActive = obj.SerialInterfaceActive;
            cpObj.FlightTime = obj.FlightTime;
            cpObj.CpuLoad = obj.CpuLoad;
            cpObj.MotorStatus = obj.MotorStatus;
            cpObj.GpsStatus = obj.GpsStatus;
            cpObj.GpsNumSatellites = obj.GpsNumSatellites;
            cpObj.Debug1 = obj.Debug1;
            cpObj.Debug2 = obj.Debug2;
            cpObj.HaveSSDKParameters = obj.HaveSSDKParameters;
            cpObj.TxPackets = obj.TxPackets;
            cpObj.TxPacketsGood = obj.TxPacketsGood;
            cpObj.RxPackets = obj.RxPackets;
            cpObj.RxPacketsGood = obj.RxPacketsGood;
            cpObj.TimesyncOffset = obj.TimesyncOffset;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.BatteryVoltage = strObj.BatteryVoltage;
            obj.FlightModeLl = strObj.FlightModeLl;
            obj.StateEstimation = strObj.StateEstimation;
            obj.PositionControl = strObj.PositionControl;
            obj.SerialInterfaceEnabled = strObj.SerialInterfaceEnabled;
            obj.SerialInterfaceActive = strObj.SerialInterfaceActive;
            obj.FlightTime = strObj.FlightTime;
            obj.CpuLoad = strObj.CpuLoad;
            obj.MotorStatus = strObj.MotorStatus;
            obj.GpsStatus = strObj.GpsStatus;
            obj.GpsNumSatellites = strObj.GpsNumSatellites;
            obj.Debug1 = strObj.Debug1;
            obj.Debug2 = strObj.Debug2;
            obj.HaveSSDKParameters = strObj.HaveSSDKParameters;
            obj.TxPackets = strObj.TxPackets;
            obj.TxPacketsGood = strObj.TxPacketsGood;
            obj.RxPackets = strObj.RxPackets;
            obj.RxPacketsGood = strObj.RxPacketsGood;
            obj.TimesyncOffset = strObj.TimesyncOffset;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.BatteryVoltage = obj.BatteryVoltage;
            strObj.FlightModeLl = obj.FlightModeLl;
            strObj.StateEstimation = obj.StateEstimation;
            strObj.PositionControl = obj.PositionControl;
            strObj.SerialInterfaceEnabled = obj.SerialInterfaceEnabled;
            strObj.SerialInterfaceActive = obj.SerialInterfaceActive;
            strObj.FlightTime = obj.FlightTime;
            strObj.CpuLoad = obj.CpuLoad;
            strObj.MotorStatus = obj.MotorStatus;
            strObj.GpsStatus = obj.GpsStatus;
            strObj.GpsNumSatellites = obj.GpsNumSatellites;
            strObj.Debug1 = obj.Debug1;
            strObj.Debug2 = obj.Debug2;
            strObj.HaveSSDKParameters = obj.HaveSSDKParameters;
            strObj.TxPackets = obj.TxPackets;
            strObj.TxPacketsGood = obj.TxPacketsGood;
            strObj.RxPackets = obj.RxPackets;
            strObj.RxPacketsGood = obj.RxPacketsGood;
            strObj.TimesyncOffset = obj.TimesyncOffset;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.asctec_hl_comm.mav_status.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.asctec_hl_comm.mav_status;
            obj.reload(strObj);
        end
    end
end
