classdef mav_ekf < robotics.ros.Message
    %mav_ekf MATLAB implementation of asctec_hl_comm/mav_ekf
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'asctec_hl_comm/mav_ekf' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '0710aec5a114bc946c3d7687c8e5a0bd' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant)
        IgnoreState = uint32(0)
        CurrentState = uint32(1)
        Initialization = uint32(2)
        StateCorrection = uint32(3)
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsVector3Class = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Vector3') % Dispatch to MATLAB class for message type geometry_msgs/Vector3
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        AngularVelocity
        LinearAcceleration
        Flag
        State
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'AngularVelocity', [], 'LinearAcceleration', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AngularVelocity', 'Flag', 'Header', 'LinearAcceleration', 'State'} % List of non-constant message properties
        ROSPropertyList = {'angular_velocity', 'flag', 'header', 'linear_acceleration', 'state'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = mav_ekf(msg)
            %mav_ekf Construct the message object mav_ekf
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'mav_ekf', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function angularvelocity = get.AngularVelocity(obj)
            %get.AngularVelocity Get the value for property AngularVelocity
            if isempty(obj.Cache.AngularVelocity)
                obj.Cache.AngularVelocity = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getAngularVelocity);
            end
            angularvelocity = obj.Cache.AngularVelocity;
        end
        
        function set.AngularVelocity(obj, angularvelocity)
            %set.AngularVelocity Set the value for property AngularVelocity
            validateattributes(angularvelocity, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'mav_ekf', 'AngularVelocity');
            
            obj.JavaMessage.setAngularVelocity(angularvelocity.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.AngularVelocity)
                obj.Cache.AngularVelocity.setJavaObject(angularvelocity.getJavaObject);
            end
        end
        
        function linearacceleration = get.LinearAcceleration(obj)
            %get.LinearAcceleration Get the value for property LinearAcceleration
            if isempty(obj.Cache.LinearAcceleration)
                obj.Cache.LinearAcceleration = feval(obj.GeometryMsgsVector3Class, obj.JavaMessage.getLinearAcceleration);
            end
            linearacceleration = obj.Cache.LinearAcceleration;
        end
        
        function set.LinearAcceleration(obj, linearacceleration)
            %set.LinearAcceleration Set the value for property LinearAcceleration
            validateattributes(linearacceleration, {obj.GeometryMsgsVector3Class}, {'nonempty', 'scalar'}, 'mav_ekf', 'LinearAcceleration');
            
            obj.JavaMessage.setLinearAcceleration(linearacceleration.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.LinearAcceleration)
                obj.Cache.LinearAcceleration.setJavaObject(linearacceleration.getJavaObject);
            end
        end
        
        function flag = get.Flag(obj)
            %get.Flag Get the value for property Flag
            flag = int32(obj.JavaMessage.getFlag);
        end
        
        function set.Flag(obj, flag)
            %set.Flag Set the value for property Flag
            validateattributes(flag, {'numeric'}, {'nonempty', 'scalar'}, 'mav_ekf', 'Flag');
            
            obj.JavaMessage.setFlag(flag);
        end
        
        function state = get.State(obj)
            %get.State Get the value for property State
            javaArray = obj.JavaMessage.getState;
            array = obj.readJavaArray(javaArray, 'single');
            state = single(array);
        end
        
        function set.State(obj, state)
            %set.State Set the value for property State
            if ~isvector(state) && isempty(state)
                % Allow empty [] input
                state = single.empty(0,1);
            end
            
            validateattributes(state, {'numeric'}, {'vector'}, 'mav_ekf', 'State');
            
            javaArray = obj.JavaMessage.getState;
            array = obj.writeJavaArray(state, javaArray, 'single');
            obj.JavaMessage.setState(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.AngularVelocity = [];
            obj.Cache.LinearAcceleration = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Flag = obj.Flag;
            cpObj.State = obj.State;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.AngularVelocity = copy(obj.AngularVelocity);
            cpObj.LinearAcceleration = copy(obj.LinearAcceleration);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Flag = strObj.Flag;
            obj.State = strObj.State;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.AngularVelocity = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.AngularVelocity);
            obj.LinearAcceleration = feval([obj.GeometryMsgsVector3Class '.loadobj'], strObj.LinearAcceleration);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Flag = obj.Flag;
            strObj.State = obj.State;
            strObj.Header = saveobj(obj.Header);
            strObj.AngularVelocity = saveobj(obj.AngularVelocity);
            strObj.LinearAcceleration = saveobj(obj.LinearAcceleration);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.asctec_hl_comm.mav_ekf.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.asctec_hl_comm.mav_ekf;
            obj.reload(strObj);
        end
    end
end
