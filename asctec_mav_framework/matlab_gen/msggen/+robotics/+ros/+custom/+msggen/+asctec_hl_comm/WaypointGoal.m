classdef WaypointGoal < robotics.ros.Message
    %WaypointGoal MATLAB implementation of asctec_hl_comm/WaypointGoal
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'asctec_hl_comm/WaypointGoal' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '507ec257de0ab6b6c1abb2c69409fbd5' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPoint32Class = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Point32') % Dispatch to MATLAB class for message type geometry_msgs/Point32
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        GoalPos
        GoalYaw
        MaxSpeed
        AccuracyPosition
        AccuracyOrientation
        Timeout
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'GoalPos', [], 'MaxSpeed', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AccuracyOrientation', 'AccuracyPosition', 'GoalPos', 'GoalYaw', 'Header', 'MaxSpeed', 'Timeout'} % List of non-constant message properties
        ROSPropertyList = {'accuracy_orientation', 'accuracy_position', 'goal_pos', 'goal_yaw', 'header', 'max_speed', 'timeout'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = WaypointGoal(msg)
            %WaypointGoal Construct the message object WaypointGoal
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'WaypointGoal', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function goalpos = get.GoalPos(obj)
            %get.GoalPos Get the value for property GoalPos
            if isempty(obj.Cache.GoalPos)
                obj.Cache.GoalPos = feval(obj.GeometryMsgsPoint32Class, obj.JavaMessage.getGoalPos);
            end
            goalpos = obj.Cache.GoalPos;
        end
        
        function set.GoalPos(obj, goalpos)
            %set.GoalPos Set the value for property GoalPos
            validateattributes(goalpos, {obj.GeometryMsgsPoint32Class}, {'nonempty', 'scalar'}, 'WaypointGoal', 'GoalPos');
            
            obj.JavaMessage.setGoalPos(goalpos.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.GoalPos)
                obj.Cache.GoalPos.setJavaObject(goalpos.getJavaObject);
            end
        end
        
        function goalyaw = get.GoalYaw(obj)
            %get.GoalYaw Get the value for property GoalYaw
            goalyaw = single(obj.JavaMessage.getGoalYaw);
        end
        
        function set.GoalYaw(obj, goalyaw)
            %set.GoalYaw Set the value for property GoalYaw
            validateattributes(goalyaw, {'numeric'}, {'nonempty', 'scalar'}, 'WaypointGoal', 'GoalYaw');
            
            obj.JavaMessage.setGoalYaw(goalyaw);
        end
        
        function maxspeed = get.MaxSpeed(obj)
            %get.MaxSpeed Get the value for property MaxSpeed
            if isempty(obj.Cache.MaxSpeed)
                obj.Cache.MaxSpeed = feval(obj.GeometryMsgsPoint32Class, obj.JavaMessage.getMaxSpeed);
            end
            maxspeed = obj.Cache.MaxSpeed;
        end
        
        function set.MaxSpeed(obj, maxspeed)
            %set.MaxSpeed Set the value for property MaxSpeed
            validateattributes(maxspeed, {obj.GeometryMsgsPoint32Class}, {'nonempty', 'scalar'}, 'WaypointGoal', 'MaxSpeed');
            
            obj.JavaMessage.setMaxSpeed(maxspeed.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.MaxSpeed)
                obj.Cache.MaxSpeed.setJavaObject(maxspeed.getJavaObject);
            end
        end
        
        function accuracyposition = get.AccuracyPosition(obj)
            %get.AccuracyPosition Get the value for property AccuracyPosition
            accuracyposition = single(obj.JavaMessage.getAccuracyPosition);
        end
        
        function set.AccuracyPosition(obj, accuracyposition)
            %set.AccuracyPosition Set the value for property AccuracyPosition
            validateattributes(accuracyposition, {'numeric'}, {'nonempty', 'scalar'}, 'WaypointGoal', 'AccuracyPosition');
            
            obj.JavaMessage.setAccuracyPosition(accuracyposition);
        end
        
        function accuracyorientation = get.AccuracyOrientation(obj)
            %get.AccuracyOrientation Get the value for property AccuracyOrientation
            accuracyorientation = single(obj.JavaMessage.getAccuracyOrientation);
        end
        
        function set.AccuracyOrientation(obj, accuracyorientation)
            %set.AccuracyOrientation Set the value for property AccuracyOrientation
            validateattributes(accuracyorientation, {'numeric'}, {'nonempty', 'scalar'}, 'WaypointGoal', 'AccuracyOrientation');
            
            obj.JavaMessage.setAccuracyOrientation(accuracyorientation);
        end
        
        function timeout = get.Timeout(obj)
            %get.Timeout Get the value for property Timeout
            timeout = single(obj.JavaMessage.getTimeout);
        end
        
        function set.Timeout(obj, timeout)
            %set.Timeout Set the value for property Timeout
            validateattributes(timeout, {'numeric'}, {'nonempty', 'scalar'}, 'WaypointGoal', 'Timeout');
            
            obj.JavaMessage.setTimeout(timeout);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.GoalPos = [];
            obj.Cache.MaxSpeed = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.GoalYaw = obj.GoalYaw;
            cpObj.AccuracyPosition = obj.AccuracyPosition;
            cpObj.AccuracyOrientation = obj.AccuracyOrientation;
            cpObj.Timeout = obj.Timeout;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.GoalPos = copy(obj.GoalPos);
            cpObj.MaxSpeed = copy(obj.MaxSpeed);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.GoalYaw = strObj.GoalYaw;
            obj.AccuracyPosition = strObj.AccuracyPosition;
            obj.AccuracyOrientation = strObj.AccuracyOrientation;
            obj.Timeout = strObj.Timeout;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            obj.GoalPos = feval([obj.GeometryMsgsPoint32Class '.loadobj'], strObj.GoalPos);
            obj.MaxSpeed = feval([obj.GeometryMsgsPoint32Class '.loadobj'], strObj.MaxSpeed);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.GoalYaw = obj.GoalYaw;
            strObj.AccuracyPosition = obj.AccuracyPosition;
            strObj.AccuracyOrientation = obj.AccuracyOrientation;
            strObj.Timeout = obj.Timeout;
            strObj.Header = saveobj(obj.Header);
            strObj.GoalPos = saveobj(obj.GoalPos);
            strObj.MaxSpeed = saveobj(obj.MaxSpeed);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.asctec_hl_comm.WaypointGoal.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.asctec_hl_comm.WaypointGoal;
            obj.reload(strObj);
        end
    end
end
