classdef Marker < robotics.ros.Message
    %Marker MATLAB implementation of vicon_bridge/Marker
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2016 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'vicon_bridge/Marker' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'da6f93747c24b19a71932ae4b040f489' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPointClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Point') % Dispatch to MATLAB class for message type geometry_msgs/Point
    end
    
    properties (Dependent)
        MarkerName
        SubjectName
        SegmentName
        Translation
        Occluded
    end
    
    properties (Access = protected)
        Cache = struct('Translation', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'MarkerName', 'Occluded', 'SegmentName', 'SubjectName', 'Translation'} % List of non-constant message properties
        ROSPropertyList = {'marker_name', 'occluded', 'segment_name', 'subject_name', 'translation'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Marker(msg)
            %Marker Construct the message object Marker
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function markername = get.MarkerName(obj)
            %get.MarkerName Get the value for property MarkerName
            markername = char(obj.JavaMessage.getMarkerName);
        end
        
        function set.MarkerName(obj, markername)
            %set.MarkerName Set the value for property MarkerName
            validateattributes(markername, {'char'}, {}, 'Marker', 'MarkerName');
            
            obj.JavaMessage.setMarkerName(markername);
        end
        
        function subjectname = get.SubjectName(obj)
            %get.SubjectName Get the value for property SubjectName
            subjectname = char(obj.JavaMessage.getSubjectName);
        end
        
        function set.SubjectName(obj, subjectname)
            %set.SubjectName Set the value for property SubjectName
            validateattributes(subjectname, {'char'}, {}, 'Marker', 'SubjectName');
            
            obj.JavaMessage.setSubjectName(subjectname);
        end
        
        function segmentname = get.SegmentName(obj)
            %get.SegmentName Get the value for property SegmentName
            segmentname = char(obj.JavaMessage.getSegmentName);
        end
        
        function set.SegmentName(obj, segmentname)
            %set.SegmentName Set the value for property SegmentName
            validateattributes(segmentname, {'char'}, {}, 'Marker', 'SegmentName');
            
            obj.JavaMessage.setSegmentName(segmentname);
        end
        
        function translation = get.Translation(obj)
            %get.Translation Get the value for property Translation
            if isempty(obj.Cache.Translation)
                obj.Cache.Translation = feval(obj.GeometryMsgsPointClass, obj.JavaMessage.getTranslation);
            end
            translation = obj.Cache.Translation;
        end
        
        function set.Translation(obj, translation)
            %set.Translation Set the value for property Translation
            validateattributes(translation, {obj.GeometryMsgsPointClass}, {'nonempty', 'scalar'}, 'Marker', 'Translation');
            
            obj.JavaMessage.setTranslation(translation.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Translation)
                obj.Cache.Translation.setJavaObject(translation.getJavaObject);
            end
        end
        
        function occluded = get.Occluded(obj)
            %get.Occluded Get the value for property Occluded
            occluded = logical(obj.JavaMessage.getOccluded);
        end
        
        function set.Occluded(obj, occluded)
            %set.Occluded Set the value for property Occluded
            validateattributes(occluded, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Marker', 'Occluded');
            
            obj.JavaMessage.setOccluded(occluded);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Translation = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.MarkerName = obj.MarkerName;
            cpObj.SubjectName = obj.SubjectName;
            cpObj.SegmentName = obj.SegmentName;
            cpObj.Occluded = obj.Occluded;
            
            % Recursively copy compound properties
            cpObj.Translation = copy(obj.Translation);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.MarkerName = strObj.MarkerName;
            obj.SubjectName = strObj.SubjectName;
            obj.SegmentName = strObj.SegmentName;
            obj.Occluded = strObj.Occluded;
            obj.Translation = feval([obj.GeometryMsgsPointClass '.loadobj'], strObj.Translation);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.MarkerName = obj.MarkerName;
            strObj.SubjectName = obj.SubjectName;
            strObj.SegmentName = obj.SegmentName;
            strObj.Occluded = obj.Occluded;
            strObj.Translation = saveobj(obj.Translation);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.vicon_bridge.Marker.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.vicon_bridge.Marker;
            obj.reload(strObj);
        end
    end
end
