classdef TfDistortInfo < robotics.ros.Message
    %TfDistortInfo MATLAB implementation of vicon_bridge/TfDistortInfo
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2016 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'vicon_bridge/TfDistortInfo' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'a7025291415a53264a70b836a949be8d' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        TfPubRate
        TfRefFrame
        TfFrameIn
        TfFrameOut
        Delay
        PositionScale
        NoiseType
        SigmaRollPitch
        SigmaYaw
        SigmaXy
        SigmaZ
        RandomWalkKXy
        RandomWalkKZ
        RandomWalkSigmaXy
        RandomWalkSigmaZ
        RandomWalkTauXy
        RandomWalkTauZ
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Delay', 'NoiseType', 'PositionScale', 'RandomWalkKXy', 'RandomWalkKZ', 'RandomWalkSigmaXy', 'RandomWalkSigmaZ', 'RandomWalkTauXy', 'RandomWalkTauZ', 'SigmaRollPitch', 'SigmaXy', 'SigmaYaw', 'SigmaZ', 'TfFrameIn', 'TfFrameOut', 'TfPubRate', 'TfRefFrame'} % List of non-constant message properties
        ROSPropertyList = {'delay', 'noise_type', 'position_scale', 'random_walk_k_xy', 'random_walk_k_z', 'random_walk_sigma_xy', 'random_walk_sigma_z', 'random_walk_tau_xy', 'random_walk_tau_z', 'sigma_roll_pitch', 'sigma_xy', 'sigma_yaw', 'sigma_z', 'tf_frame_in', 'tf_frame_out', 'tf_pub_rate', 'tf_ref_frame'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = TfDistortInfo(msg)
            %TfDistortInfo Construct the message object TfDistortInfo
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function tfpubrate = get.TfPubRate(obj)
            %get.TfPubRate Get the value for property TfPubRate
            tfpubrate = double(obj.JavaMessage.getTfPubRate);
        end
        
        function set.TfPubRate(obj, tfpubrate)
            %set.TfPubRate Set the value for property TfPubRate
            validateattributes(tfpubrate, {'numeric'}, {'nonempty', 'scalar'}, 'TfDistortInfo', 'TfPubRate');
            
            obj.JavaMessage.setTfPubRate(tfpubrate);
        end
        
        function tfrefframe = get.TfRefFrame(obj)
            %get.TfRefFrame Get the value for property TfRefFrame
            tfrefframe = char(obj.JavaMessage.getTfRefFrame);
        end
        
        function set.TfRefFrame(obj, tfrefframe)
            %set.TfRefFrame Set the value for property TfRefFrame
            validateattributes(tfrefframe, {'char'}, {}, 'TfDistortInfo', 'TfRefFrame');
            
            obj.JavaMessage.setTfRefFrame(tfrefframe);
        end
        
        function tfframein = get.TfFrameIn(obj)
            %get.TfFrameIn Get the value for property TfFrameIn
            tfframein = char(obj.JavaMessage.getTfFrameIn);
        end
        
        function set.TfFrameIn(obj, tfframein)
            %set.TfFrameIn Set the value for property TfFrameIn
            validateattributes(tfframein, {'char'}, {}, 'TfDistortInfo', 'TfFrameIn');
            
            obj.JavaMessage.setTfFrameIn(tfframein);
        end
        
        function tfframeout = get.TfFrameOut(obj)
            %get.TfFrameOut Get the value for property TfFrameOut
            tfframeout = char(obj.JavaMessage.getTfFrameOut);
        end
        
        function set.TfFrameOut(obj, tfframeout)
            %set.TfFrameOut Set the value for property TfFrameOut
            validateattributes(tfframeout, {'char'}, {}, 'TfDistortInfo', 'TfFrameOut');
            
            obj.JavaMessage.setTfFrameOut(tfframeout);
        end
        
        function delay = get.Delay(obj)
            %get.Delay Get the value for property Delay
            delay = int32(obj.JavaMessage.getDelay);
        end
        
        function set.Delay(obj, delay)
            %set.Delay Set the value for property Delay
            validateattributes(delay, {'numeric'}, {'nonempty', 'scalar'}, 'TfDistortInfo', 'Delay');
            
            obj.JavaMessage.setDelay(delay);
        end
        
        function positionscale = get.PositionScale(obj)
            %get.PositionScale Get the value for property PositionScale
            positionscale = double(obj.JavaMessage.getPositionScale);
        end
        
        function set.PositionScale(obj, positionscale)
            %set.PositionScale Set the value for property PositionScale
            validateattributes(positionscale, {'numeric'}, {'nonempty', 'scalar'}, 'TfDistortInfo', 'PositionScale');
            
            obj.JavaMessage.setPositionScale(positionscale);
        end
        
        function noisetype = get.NoiseType(obj)
            %get.NoiseType Get the value for property NoiseType
            noisetype = char(obj.JavaMessage.getNoiseType);
        end
        
        function set.NoiseType(obj, noisetype)
            %set.NoiseType Set the value for property NoiseType
            validateattributes(noisetype, {'char'}, {}, 'TfDistortInfo', 'NoiseType');
            
            obj.JavaMessage.setNoiseType(noisetype);
        end
        
        function sigmarollpitch = get.SigmaRollPitch(obj)
            %get.SigmaRollPitch Get the value for property SigmaRollPitch
            sigmarollpitch = double(obj.JavaMessage.getSigmaRollPitch);
        end
        
        function set.SigmaRollPitch(obj, sigmarollpitch)
            %set.SigmaRollPitch Set the value for property SigmaRollPitch
            validateattributes(sigmarollpitch, {'numeric'}, {'nonempty', 'scalar'}, 'TfDistortInfo', 'SigmaRollPitch');
            
            obj.JavaMessage.setSigmaRollPitch(sigmarollpitch);
        end
        
        function sigmayaw = get.SigmaYaw(obj)
            %get.SigmaYaw Get the value for property SigmaYaw
            sigmayaw = double(obj.JavaMessage.getSigmaYaw);
        end
        
        function set.SigmaYaw(obj, sigmayaw)
            %set.SigmaYaw Set the value for property SigmaYaw
            validateattributes(sigmayaw, {'numeric'}, {'nonempty', 'scalar'}, 'TfDistortInfo', 'SigmaYaw');
            
            obj.JavaMessage.setSigmaYaw(sigmayaw);
        end
        
        function sigmaxy = get.SigmaXy(obj)
            %get.SigmaXy Get the value for property SigmaXy
            sigmaxy = double(obj.JavaMessage.getSigmaXy);
        end
        
        function set.SigmaXy(obj, sigmaxy)
            %set.SigmaXy Set the value for property SigmaXy
            validateattributes(sigmaxy, {'numeric'}, {'nonempty', 'scalar'}, 'TfDistortInfo', 'SigmaXy');
            
            obj.JavaMessage.setSigmaXy(sigmaxy);
        end
        
        function sigmaz = get.SigmaZ(obj)
            %get.SigmaZ Get the value for property SigmaZ
            sigmaz = double(obj.JavaMessage.getSigmaZ);
        end
        
        function set.SigmaZ(obj, sigmaz)
            %set.SigmaZ Set the value for property SigmaZ
            validateattributes(sigmaz, {'numeric'}, {'nonempty', 'scalar'}, 'TfDistortInfo', 'SigmaZ');
            
            obj.JavaMessage.setSigmaZ(sigmaz);
        end
        
        function randomwalkkxy = get.RandomWalkKXy(obj)
            %get.RandomWalkKXy Get the value for property RandomWalkKXy
            randomwalkkxy = double(obj.JavaMessage.getRandomWalkKXy);
        end
        
        function set.RandomWalkKXy(obj, randomwalkkxy)
            %set.RandomWalkKXy Set the value for property RandomWalkKXy
            validateattributes(randomwalkkxy, {'numeric'}, {'nonempty', 'scalar'}, 'TfDistortInfo', 'RandomWalkKXy');
            
            obj.JavaMessage.setRandomWalkKXy(randomwalkkxy);
        end
        
        function randomwalkkz = get.RandomWalkKZ(obj)
            %get.RandomWalkKZ Get the value for property RandomWalkKZ
            randomwalkkz = double(obj.JavaMessage.getRandomWalkKZ);
        end
        
        function set.RandomWalkKZ(obj, randomwalkkz)
            %set.RandomWalkKZ Set the value for property RandomWalkKZ
            validateattributes(randomwalkkz, {'numeric'}, {'nonempty', 'scalar'}, 'TfDistortInfo', 'RandomWalkKZ');
            
            obj.JavaMessage.setRandomWalkKZ(randomwalkkz);
        end
        
        function randomwalksigmaxy = get.RandomWalkSigmaXy(obj)
            %get.RandomWalkSigmaXy Get the value for property RandomWalkSigmaXy
            randomwalksigmaxy = double(obj.JavaMessage.getRandomWalkSigmaXy);
        end
        
        function set.RandomWalkSigmaXy(obj, randomwalksigmaxy)
            %set.RandomWalkSigmaXy Set the value for property RandomWalkSigmaXy
            validateattributes(randomwalksigmaxy, {'numeric'}, {'nonempty', 'scalar'}, 'TfDistortInfo', 'RandomWalkSigmaXy');
            
            obj.JavaMessage.setRandomWalkSigmaXy(randomwalksigmaxy);
        end
        
        function randomwalksigmaz = get.RandomWalkSigmaZ(obj)
            %get.RandomWalkSigmaZ Get the value for property RandomWalkSigmaZ
            randomwalksigmaz = double(obj.JavaMessage.getRandomWalkSigmaZ);
        end
        
        function set.RandomWalkSigmaZ(obj, randomwalksigmaz)
            %set.RandomWalkSigmaZ Set the value for property RandomWalkSigmaZ
            validateattributes(randomwalksigmaz, {'numeric'}, {'nonempty', 'scalar'}, 'TfDistortInfo', 'RandomWalkSigmaZ');
            
            obj.JavaMessage.setRandomWalkSigmaZ(randomwalksigmaz);
        end
        
        function randomwalktauxy = get.RandomWalkTauXy(obj)
            %get.RandomWalkTauXy Get the value for property RandomWalkTauXy
            randomwalktauxy = double(obj.JavaMessage.getRandomWalkTauXy);
        end
        
        function set.RandomWalkTauXy(obj, randomwalktauxy)
            %set.RandomWalkTauXy Set the value for property RandomWalkTauXy
            validateattributes(randomwalktauxy, {'numeric'}, {'nonempty', 'scalar'}, 'TfDistortInfo', 'RandomWalkTauXy');
            
            obj.JavaMessage.setRandomWalkTauXy(randomwalktauxy);
        end
        
        function randomwalktauz = get.RandomWalkTauZ(obj)
            %get.RandomWalkTauZ Get the value for property RandomWalkTauZ
            randomwalktauz = double(obj.JavaMessage.getRandomWalkTauZ);
        end
        
        function set.RandomWalkTauZ(obj, randomwalktauz)
            %set.RandomWalkTauZ Set the value for property RandomWalkTauZ
            validateattributes(randomwalktauz, {'numeric'}, {'nonempty', 'scalar'}, 'TfDistortInfo', 'RandomWalkTauZ');
            
            obj.JavaMessage.setRandomWalkTauZ(randomwalktauz);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.TfPubRate = obj.TfPubRate;
            cpObj.TfRefFrame = obj.TfRefFrame;
            cpObj.TfFrameIn = obj.TfFrameIn;
            cpObj.TfFrameOut = obj.TfFrameOut;
            cpObj.Delay = obj.Delay;
            cpObj.PositionScale = obj.PositionScale;
            cpObj.NoiseType = obj.NoiseType;
            cpObj.SigmaRollPitch = obj.SigmaRollPitch;
            cpObj.SigmaYaw = obj.SigmaYaw;
            cpObj.SigmaXy = obj.SigmaXy;
            cpObj.SigmaZ = obj.SigmaZ;
            cpObj.RandomWalkKXy = obj.RandomWalkKXy;
            cpObj.RandomWalkKZ = obj.RandomWalkKZ;
            cpObj.RandomWalkSigmaXy = obj.RandomWalkSigmaXy;
            cpObj.RandomWalkSigmaZ = obj.RandomWalkSigmaZ;
            cpObj.RandomWalkTauXy = obj.RandomWalkTauXy;
            cpObj.RandomWalkTauZ = obj.RandomWalkTauZ;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.TfPubRate = strObj.TfPubRate;
            obj.TfRefFrame = strObj.TfRefFrame;
            obj.TfFrameIn = strObj.TfFrameIn;
            obj.TfFrameOut = strObj.TfFrameOut;
            obj.Delay = strObj.Delay;
            obj.PositionScale = strObj.PositionScale;
            obj.NoiseType = strObj.NoiseType;
            obj.SigmaRollPitch = strObj.SigmaRollPitch;
            obj.SigmaYaw = strObj.SigmaYaw;
            obj.SigmaXy = strObj.SigmaXy;
            obj.SigmaZ = strObj.SigmaZ;
            obj.RandomWalkKXy = strObj.RandomWalkKXy;
            obj.RandomWalkKZ = strObj.RandomWalkKZ;
            obj.RandomWalkSigmaXy = strObj.RandomWalkSigmaXy;
            obj.RandomWalkSigmaZ = strObj.RandomWalkSigmaZ;
            obj.RandomWalkTauXy = strObj.RandomWalkTauXy;
            obj.RandomWalkTauZ = strObj.RandomWalkTauZ;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.TfPubRate = obj.TfPubRate;
            strObj.TfRefFrame = obj.TfRefFrame;
            strObj.TfFrameIn = obj.TfFrameIn;
            strObj.TfFrameOut = obj.TfFrameOut;
            strObj.Delay = obj.Delay;
            strObj.PositionScale = obj.PositionScale;
            strObj.NoiseType = obj.NoiseType;
            strObj.SigmaRollPitch = obj.SigmaRollPitch;
            strObj.SigmaYaw = obj.SigmaYaw;
            strObj.SigmaXy = obj.SigmaXy;
            strObj.SigmaZ = obj.SigmaZ;
            strObj.RandomWalkKXy = obj.RandomWalkKXy;
            strObj.RandomWalkKZ = obj.RandomWalkKZ;
            strObj.RandomWalkSigmaXy = obj.RandomWalkSigmaXy;
            strObj.RandomWalkSigmaZ = obj.RandomWalkSigmaZ;
            strObj.RandomWalkTauXy = obj.RandomWalkTauXy;
            strObj.RandomWalkTauZ = obj.RandomWalkTauZ;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.vicon_bridge.TfDistortInfo.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.vicon_bridge.TfDistortInfo;
            obj.reload(strObj);
        end
    end
end
